document.querySelector('mutation-test-report-app').report = {"files":{"/Users/noriste/Sites/noriste/typescript-is-type/index.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":2,"line":23},"start":{"column":18,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":4,"line":22},"start":{"column":22,"line":8}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"8","location":{"end":{"column":52,"line":9},"start":{"column":35,"line":9}},"mutatorName":"BinaryExpression","replacement":"instance !== null","status":"Killed"},{"id":"9","location":{"end":{"column":52,"line":9},"start":{"column":35,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"3","location":{"end":{"column":52,"line":9},"start":{"column":9,"line":9}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"2","location":{"end":{"column":52,"line":9},"start":{"column":9,"line":9}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"10","location":{"end":{"column":52,"line":9},"start":{"column":35,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"11","location":{"end":{"column":6,"line":11},"start":{"column":54,"line":9}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"12","location":{"end":{"column":19,"line":10},"start":{"column":14,"line":10}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"13","location":{"end":{"column":28,"line":12},"start":{"column":8,"line":12}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"15","location":{"end":{"column":28,"line":12},"start":{"column":8,"line":12}},"mutatorName":"PrefixUnaryExpression","replacement":"Array.isArray(keys)","status":"Killed"},{"id":"14","location":{"end":{"column":28,"line":12},"start":{"column":8,"line":12}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"4","location":{"end":{"column":52,"line":9},"start":{"column":9,"line":9}},"mutatorName":"BinaryExpression","replacement":"instance === undefined && instance === null","status":"Killed"},{"id":"5","location":{"end":{"column":31,"line":9},"start":{"column":9,"line":9}},"mutatorName":"BinaryExpression","replacement":"instance !== undefined","status":"Killed"},{"id":"16","location":{"end":{"column":6,"line":14},"start":{"column":30,"line":12}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"17","location":{"end":{"column":20,"line":13},"start":{"column":14,"line":13}},"mutatorName":"ArrayLiteral","replacement":"[]","status":"Killed"},{"id":"18","location":{"end":{"column":42,"line":16},"start":{"column":37,"line":16}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"19","location":{"end":{"column":42,"line":16},"start":{"column":37,"line":16}},"mutatorName":"BinaryExpression","replacement":"i <= n","status":"Killed"},{"id":"20","location":{"end":{"column":42,"line":16},"start":{"column":37,"line":16}},"mutatorName":"BinaryExpression","replacement":"i >= n","status":"Killed"},{"id":"21","location":{"end":{"column":47,"line":16},"start":{"column":44,"line":16}},"mutatorName":"PostfixUnaryExpression","replacement":"i--","status":"Killed"},{"id":"23","location":{"end":{"column":41,"line":17},"start":{"column":10,"line":17}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"24","location":{"end":{"column":41,"line":17},"start":{"column":10,"line":17}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"22","location":{"end":{"column":6,"line":20},"start":{"column":49,"line":16}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"25","location":{"end":{"column":41,"line":17},"start":{"column":10,"line":17}},"mutatorName":"BinaryExpression","replacement":"instance[keys[i]] !== undefined","status":"Killed"},{"id":"6","location":{"end":{"column":31,"line":9},"start":{"column":9,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"26","location":{"end":{"column":8,"line":19},"start":{"column":43,"line":17}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"27","location":{"end":{"column":21,"line":18},"start":{"column":16,"line":18}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"7","location":{"end":{"column":31,"line":9},"start":{"column":9,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"28","location":{"end":{"column":16,"line":21},"start":{"column":12,"line":21}},"mutatorName":"BooleanSubstitution","replacement":"false","status":"Killed"}],"source":"module.exports = {\n  /**\n   * Perform a runtime check about an instance type. It returns true if all the specified keys are\n   * different from undefined\n   * @param {*} instance The instance to be checked\n   * @param {string|string[]} keys The keys that must be defined while checking the instance type\n   */\n  is(instance, keys) {\n    if (instance === undefined || instance === null) {\n      return false;\n    }\n    if(!Array.isArray(keys)) {\n      keys = [keys];\n    }\n\n    for(let i = 0, n = keys.length; i < n; i++) {\n      if(instance[keys[i]] === undefined) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};